<?php
$this->htmlElement('body')->appendAttribute('class', 'page');
$this->pageTitle($page->title(), 2);
$showPagePagination = $this->siteSetting('show_page_pagination', true);
?>

<?php
$nav = $site->publicNav();
$container = $nav->getContainer();
$activePage = $nav->findActive($container);
if ($activePage) :
?>
  <?php if ($activePage['depth'] !== 0) : ?>
    <nav class="breadcrumbs"><?php echo $nav->breadcrumbs(); ?></nav>
  <?php endif; ?>
<?php endif; ?>

<?php /* if ($activePage) : ?>
  <?php if ($this->displayNavigation && $activePage['page']->hasPages()) : ?>
    <nav class="sub-menu"><?php echo $nav->menu()->renderSubMenu(); ?></nav>
  <?php endif; ?>
<?php endif; */ ?>

<?php $this->trigger('view.show.before'); ?>
<div class="blocks py-3 py-md-5">

  <?php echo $this->content; ?>

</div>

<script>
  // Wait for the DOM to fully load before running the script
  document.addEventListener('DOMContentLoaded', function() {
    // Enhance all images within '.media-render.file a img' selectors
    document.querySelectorAll('.media-render.file a img').forEach(image => {
      // Attempt to use the parent anchor's title as alt text if alt is missing
      const anchorTitle = image.parentNode.getAttribute('title');
      if (anchorTitle && !image.getAttribute('alt')) {
        image.setAttribute('alt', anchorTitle);
      }
      // Add 'img-fluid' class for responsive images
      image.classList.add('img-fluid', 'shadow');
    });

    lazyLoadMedia(); // Add lazy loading to images and iframes

    // Check if a TOC container exists and then generate TOC for subsequent headers
    const tocContainer = document.querySelector('.table-of-contents');
    if (tocContainer) {
      generateTableOfContentsForSubsequentHeaders(tocContainer);
    }

    // Process media render elements for captions and adjustments
    processMediaRenders();
    // Transform '.page-row' and '.song-intertext' elements to new structures
    transformElements('.page-row', 'page-row row gx-4 gx-lg-5 justify-content-center', 'col-md-10 col-lg-8 col-xl-7');
    transformElements('.song-intertext', 'song-intertext row justify-content-center', 'col-md-10', true);
  });

  // Function to generate IDs for headers and generate TOC for headers below the TOC container
  function generateTableOfContentsForSubsequentHeaders(tocContainer) {
    // Select all h1 and h2 elements within .page .blocks
    const headers = document.querySelectorAll('.page .blocks h1');

    // Convert NodeList to Array to use Array methods
    let headersArray = Array.from(headers);

    // Find the index of the first header that comes after the TOC in the DOM
    const startIndex = headersArray.findIndex(header =>
      tocContainer.compareDocumentPosition(header) & Node.DOCUMENT_POSITION_FOLLOWING
    );

    // Filter headers to only those after the TOC container
    if (startIndex !== -1) {
      headersArray.slice(startIndex).forEach(header => {
        // Check if the header is not a child of the TOC container itself
        if (!tocContainer.contains(header)) {
          if (!header.id) {
            header.id = generateIdFromHeaderText(header.textContent);
          }
          appendToCEntry(tocContainer, header);
        }
      });
    }
  }


  // Generates a web-friendly ID from header text
  function generateIdFromHeaderText(text) {
    return text.toLowerCase().trim()
      .replace(/&/g, 'and')
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
  }

  // Appends a TOC entry for a given header
  function appendToCEntry(tocContainer, header) {
    const tocLink = document.createElement('a');
    tocLink.href = '#' + header.id;
    tocLink.textContent = header.textContent;
    tocContainer.appendChild(tocLink);
  }

  // Handles the transformation of media render elements
  function processMediaRenders() {
    document.querySelectorAll('.media-render').forEach(mediaRender => {
      // Add Bootstrap classes for flex layout
      mediaRender.classList.add('d-flex', 'flex-column', 'align-items-center');

      const iframes = mediaRender.querySelectorAll('iframe');
      iframes.forEach(iframe => {
        // Remove width, height attributes, and frameborder
        iframe.removeAttribute('width');
        iframe.removeAttribute('height');
        iframe.removeAttribute('frameborder');
        // Remove inline styles
        iframe.removeAttribute('style');

        // Add 'shadow' class for shadow effect
        iframe.classList.add('shadow');

        // Check if the iframe is wrapped in a <p> tag
        if (iframe.parentNode.tagName === 'P') {
          const p = iframe.parentNode;
          mediaRender.insertBefore(iframe, p); // Move iframe up before the <p>
          p.remove(); // Remove the <p> tag
        }
      });

      const videos = mediaRender.querySelectorAll('video');
      videos.forEach(video => {
        // Add 'shadow' class for shadow effect
        video.classList.add('shadow');
        // Check if the iframe is wrapped in a <p> tag
        if (video.parentNode.tagName === 'P') {
          const p = video.parentNode;
          mediaRender.insertBefore(video, p); // Move iframe up before the <p>
          p.remove(); // Remove the <p> tag
        }
      });

      const audios = mediaRender.querySelectorAll('audio');
      audios.forEach(audio => {
        // Assuming the immediate parent of the audio tag is the div you want to target
        const parentDiv = audio.parentNode;

        // Check if the parent is indeed a div to avoid errors
        if (parentDiv.tagName === 'DIV') {
          // Add 'shadow' class for shadow effect
          parentDiv.classList.add('shadow', 'rounded');

          // Apply CSS background-color
          parentDiv.style.backgroundColor = '#F1F3F4';
        }
      });

      // Determine if we should keep or replace the caption
      const shouldKeepOriginalCaption = audios.length > 0;
      const captionDiv = mediaRender.closest('.large.file.row')?.querySelector('.caption');
      if (!shouldKeepOriginalCaption) {

        if (captionDiv && captionDiv.innerHTML.trim()) {
          captionDiv.style.display = 'none'; // Hide the original caption
          appendFigcaption(mediaRender, captionDiv.innerHTML.trim()); // Append a new figcaption with HTML content
        }


        // Adjust the class of the parent '.attachments' div for layout purposes
        const attachmentsDiv = mediaRender.closest('.attachments');
        if (attachmentsDiv) {
          attachmentsDiv.className = 'col-md-12';
        }
      }
    });
  }


  // Creates and appends a figcaption element with HTML content
  function appendFigcaption(mediaRender, htmlContent) {
    const figcaption = document.createElement('figcaption');
    figcaption.innerHTML = htmlContent; // Set the inner HTML to the passed HTML content
    mediaRender.appendChild(figcaption); // Append the figcaption to the mediaRender element
  }

  // Transforms selected elements to a specified structure and applies classes
  function transformElements(selector, outerClass, innerClass, applyTextCenter = false) {
    document.querySelectorAll(selector).forEach(element => {
      // Create the new wrapper structure with specified classes
      const outerDiv = createElementWithClass('div', outerClass);
      const innerDiv = createElementWithClass('div', innerClass);

      // Move all child elements of the current element to the new inner div
      while (element.firstChild) {
        // If applying text-center class to <p> elements
        if (applyTextCenter && element.firstChild.tagName === 'P') {
          element.firstChild.className = 'text-center px-lg-5 mx-lg-5 mx-3';
        }
        innerDiv.appendChild(element.firstChild); // This operation removes the child from 'element'
      }

      // Insert the structured divs into the DOM, replacing the original element
      outerDiv.appendChild(innerDiv);
      element.parentNode.replaceChild(outerDiv, element);
    });
  }

  // Utility function to create an element of a given tag with a specified class
  function createElementWithClass(tag, className) {
    const element = document.createElement(tag);
    element.className = className; // Set the class name
    return element; // Return the new element
  }

  // Function to add lazy loading to images and iframes
  function lazyLoadMedia() {
    // Select all img elements not inside a carousel-item div
    const images = document.querySelectorAll('img:not(.carousel-item img):not(.logo img)');

    images.forEach(img => {
      img.setAttribute('loading', 'lazy');
    });

    // Select all iframe elements
    const iframes = document.querySelectorAll('iframe');
    iframes.forEach(iframe => {
      iframe.setAttribute('loading', 'lazy');
    });
  }
</script>




<?php $this->trigger('view.show.after'); ?>
<?php if ($showPagePagination) : ?>
  <?php echo $this->sitePagePagination(); ?>
<?php endif; ?>